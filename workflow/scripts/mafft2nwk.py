from argparse import ArgumentParser

parser = ArgumentParser(description='Convert the tree generated by MAFFT to a tree acceptable to TWILIGHT')
parser.add_argument('intree', help='Tree file from MAFFT')
parser.add_argument('seq', help='Unaligned sequence file')
parser.add_argument('outtree', help='Modified tree')
parser.add_argument('--parttree', action='store_true', help='Is the output from parttree')
args = parser.parse_args()

seqOrder = dict()
nwkStr = ""
with open(args.seq, "r") as seqFile:
    inContent = seqFile.read().splitlines()
    order = 1
    for c in inContent:
        if len(c) > 0:
            if c[0] == '>':
                seqOrder[order] = c[1:]
                order += 1
            
if args.parttree:
    with open(args.intree, "r") as treeFile:
        inContent = treeFile.read().splitlines()
        for c in inContent:
            if c.isdigit():
                nwkStr += seqOrder[int(c)]
            else:
                if any(cc.isdigit() for cc in c): 
                    substr = ""
                    num = ""
                    for cc in c:
                        if cc.isdigit():
                            num += cc
                        else:
                            substr += num if num == "" else seqOrder[int(num)]
                            substr += cc
                            num = ""
                    nwkStr += substr
                else:
                    nwkStr += c
    nwkStr += ';'
else:
    with open(args.intree, "r") as treeFile:
        inContent = treeFile.read().splitlines()
        for c in inContent:
            cut = c.find('_')
            if cut == -1:
                nwkStr += c
            else:
                num = c[:cut]
                # name = c[cut+1:]
                # if seqOrder[int(num)] != name:
                #     print("Something must be wrong.", num, seqOrder[int(num)], name)
                nwkStr += seqOrder[int(num)]

with open(args.outtree, "w") as outFile:
    outFile.write(nwkStr)
